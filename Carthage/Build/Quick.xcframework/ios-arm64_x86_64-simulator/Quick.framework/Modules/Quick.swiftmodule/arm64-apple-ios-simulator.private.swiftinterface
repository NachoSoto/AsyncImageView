// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Quick
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import Quick
import Swift
import XCTest
import _Concurrency
import _StringProcessing
#if compiler(>=5.3) && $AsyncAwait
public typealias BeforeExampleAsyncClosure = () async -> Swift.Void
#endif
public typealias BeforeExampleClosure = () -> Swift.Void
#if compiler(>=5.3) && $AsyncAwait
public typealias BeforeExampleWithMetadataAsyncClosure = (_ exampleMetadata: Quick.ExampleMetadata) async -> Swift.Void
#endif
public typealias BeforeExampleWithMetadataClosure = (_ exampleMetadata: Quick.ExampleMetadata) -> Swift.Void
#if compiler(>=5.3) && $AsyncAwait
public typealias AfterExampleAsyncClosure = Quick.BeforeExampleAsyncClosure
#endif
public typealias AfterExampleClosure = Quick.BeforeExampleClosure
#if compiler(>=5.3) && $AsyncAwait
public typealias AfterExampleWithMetadataAsyncClosure = Quick.BeforeExampleWithMetadataAsyncClosure
#endif
public typealias AfterExampleWithMetadataClosure = Quick.BeforeExampleWithMetadataClosure
public typealias AroundExampleClosure = (_ runExample: @escaping () -> Swift.Void) -> Swift.Void
public typealias AroundExampleWithMetadataClosure = (_ exampleMetadata: Quick.ExampleMetadata, _ runExample: @escaping () -> Swift.Void) -> Swift.Void
#if compiler(>=5.3) && $AsyncAwait
public typealias AroundExampleAsyncClosure = (_ runExample: @escaping () async -> Swift.Void) async -> Swift.Void
#endif
#if compiler(>=5.3) && $AsyncAwait
public typealias AroundExampleWithMetadataAsyncClosure = (_ exampleMetadata: Quick.ExampleMetadata, _ runExample: @escaping () async -> Swift.Void) async -> Swift.Void
#endif
#if compiler(>=5.3) && $AsyncAwait
public typealias BeforeSuiteAsyncClosure = () async -> Swift.Void
#endif
public typealias BeforeSuiteClosure = () -> Swift.Void
#if compiler(>=5.3) && $AsyncAwait
public typealias AfterSuiteAsyncClosure = Quick.BeforeSuiteAsyncClosure
#endif
public typealias AfterSuiteClosure = Quick.BeforeSuiteClosure
public struct StopTest : Swift.Error {
  public let failureDescription: Swift.String
  public let reportError: Swift.Bool
  public let callsite: Quick.Callsite
  public init(_ failureDescription: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line)
  public static let silently: Quick.StopTest
}
public func currentSpec() -> XCTest.XCTestCase?
@objc @_inheritsConvenienceInitializers @objcMembers public class _ExampleMetadataBase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ExampleMetadata : Quick._ExampleMetadataBase {
  @objc final public let example: Quick.ExampleBase
  @objc final public let exampleIndex: Swift.Int
  @objc deinit
}
public protocol AsyncDSLUser {
}
extension Quick.AsyncSpec : Quick.AsyncDSLUser {
}
extension Quick.AsyncBehavior : Quick.AsyncDSLUser {
}
extension Quick.AsyncDSLUser {
  public static func beforeSuite(_ closure: @escaping Quick.BeforeSuiteClosure)
  public static func afterSuite(_ closure: @escaping Quick.AfterSuiteClosure)
  public static func describe(_ description: Swift.String, closure: () -> Swift.Void)
  public static func context(_ description: Swift.String, closure: () -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  public static func beforeEach(_ closure: @escaping Quick.BeforeExampleAsyncClosure)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func beforeEach(_ closure: @escaping Quick.BeforeExampleWithMetadataAsyncClosure)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func afterEach(_ closure: @escaping Quick.AfterExampleAsyncClosure)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func afterEach(_ closure: @escaping Quick.AfterExampleWithMetadataAsyncClosure)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func aroundEach(_ closure: @escaping Quick.AroundExampleAsyncClosure)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func aroundEach(_ closure: @escaping Quick.AroundExampleWithMetadataAsyncClosure)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func justBeforeEach(_ closure: @escaping Quick.BeforeExampleAsyncClosure)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func it(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () async throws -> Swift.Void)
  #endif
  public static func itBehavesLike<C>(_ behavior: Quick.AsyncBehavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)
  #if compiler(>=5.3) && $AsyncAwait
  public static func pending(_ description: Swift.String, closure: () async throws -> Swift.Void)
  #endif
  public static func xdescribe(_ description: Swift.String, closure: () -> Swift.Void)
  public static func xcontext(_ description: Swift.String, closure: () -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  public static func xit(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () async throws -> Swift.Void)
  #endif
  public static func xitBehavesLike<C>(_ behavior: Quick.AsyncBehavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)
  public static func fdescribe(_ description: Swift.String, closure: () -> Swift.Void)
  public static func fcontext(_ description: Swift.String, closure: () -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  public static func fit(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () async throws -> Swift.Void)
  #endif
  public static func fitBehavesLike<C>(_ behavior: Quick.AsyncBehavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)
}
@_hasMissingDesignatedInitializers open class AsyncBehavior<Context> {
  open class var name: Swift.String {
    get
  }
  open class func spec(_ aContext: @escaping () -> Context)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class _CallsiteBase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public typealias FileString = Swift.String
@objc @_hasMissingDesignatedInitializers final public class Callsite : Quick._CallsiteBase {
  @objc final public let file: Quick.FileString
  @objc final public let line: Swift.UInt
  @objc deinit
}
extension Quick.Callsite {
  @nonobjc public static func == (lhs: Quick.Callsite, rhs: Quick.Callsite) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class AsyncExampleGroup : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
  final public var examples: [Quick.AsyncExample] {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class ExampleGroup : ObjectiveC.NSObject {
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc final public var examples: [Quick.Example] {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AsyncExample : Quick.ExampleBase {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public var name: Swift.String {
    @objc get
  }
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func run() async
  #endif
  @objc deinit
}
extension Quick.AsyncExample {
  @nonobjc public static func == (lhs: Quick.AsyncExample, rhs: Quick.AsyncExample) -> Swift.Bool
}
public typealias SharedExampleContext = () -> [Swift.String : Any]
public typealias SharedExampleClosure = (@escaping Quick.SharedExampleContext) -> Swift.Void
public typealias QuickConfigurer = (_ configuration: Quick.QCKConfiguration) -> Swift.Void
public typealias ExampleFilter = (_ example: Quick.ExampleBase) -> Swift.Bool
@objc @_inheritsConvenienceInitializers final public class QCKConfiguration : ObjectiveC.NSObject {
  final public var runAllWhenEverythingFiltered: Swift.Bool
  final public func include(_ filter: @escaping Quick.ExampleFilter)
  final public func exclude(_ filter: @escaping Quick.ExampleFilter)
  @objc(beforeEachWithMetadata:) final public func objc_beforeEach(_ closure: @escaping Quick.BeforeExampleWithMetadataClosure)
  @nonobjc final public func beforeEach(_ closure: @escaping Quick.BeforeExampleWithMetadataClosure)
  final public func beforeEach(_ closure: @escaping Quick.BeforeExampleClosure)
  @objc(afterEachWithMetadata:) final public func objc_afterEach(_ closure: @escaping Quick.AfterExampleWithMetadataClosure)
  @nonobjc final public func afterEach(_ closure: @escaping Quick.AfterExampleWithMetadataClosure)
  final public func afterEach(_ closure: @escaping Quick.AfterExampleClosure)
  final public func aroundEach(_ closure: @escaping Quick.AroundExampleClosure)
  #if compiler(>=5.3) && $AsyncAwait
  final public func aroundEach(_ closure: @escaping Quick.AroundExampleAsyncClosure)
  #endif
  final public func aroundEach(_ closure: @escaping Quick.AroundExampleWithMetadataClosure)
  #if compiler(>=5.3) && $AsyncAwait
  final public func aroundEach(_ closure: @escaping Quick.AroundExampleWithMetadataAsyncClosure)
  #endif
  final public func beforeSuite(_ closure: @escaping Quick.BeforeSuiteClosure)
  final public func afterSuite(_ closure: @escaping Quick.AfterSuiteClosure)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Behavior<Context> {
  open class var name: Swift.String {
    get
  }
  open class func spec(_ aContext: @escaping () -> Context)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class QuickTestSuite : XCTest.XCTestSuite {
  @objc public static func selectedTestSuite(forTestCaseWithName name: Swift.String, testName: Swift.String?) -> Quick.QuickTestSuite?
  @objc override dynamic public init(name: Swift.String)
  @objc deinit
}
public protocol SyncDSLUser {
}
extension Quick.QuickSpec : Quick.SyncDSLUser {
}
extension Quick.Behavior : Quick.SyncDSLUser {
}
extension Quick.QuickConfiguration : Quick.SyncDSLUser {
}
extension Quick.SyncDSLUser {
  public static func beforeSuite(_ closure: @escaping Quick.BeforeSuiteClosure)
  public static func afterSuite(_ closure: @escaping Quick.AfterSuiteClosure)
  public static func sharedExamples(_ name: Swift.String, closure: @escaping () -> Swift.Void)
  public static func sharedExamples(_ name: Swift.String, closure: @escaping Quick.SharedExampleClosure)
  public static func describe(_ description: Swift.String, closure: () -> Swift.Void)
  public static func context(_ description: Swift.String, closure: () -> Swift.Void)
  public static func beforeEach(_ closure: @escaping Quick.BeforeExampleClosure)
  public static func beforeEach(_ closure: @escaping Quick.BeforeExampleWithMetadataClosure)
  public static func afterEach(_ closure: @escaping Quick.AfterExampleClosure)
  public static func afterEach(_ closure: @escaping Quick.AfterExampleWithMetadataClosure)
  public static func aroundEach(_ closure: @escaping Quick.AroundExampleClosure)
  public static func aroundEach(_ closure: @escaping Quick.AroundExampleWithMetadataClosure)
  public static func justBeforeEach(_ closure: @escaping Quick.BeforeExampleClosure)
  public static func it(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () throws -> Swift.Void)
  public static func itBehavesLike(_ name: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line)
  public static func itBehavesLike(_ name: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, sharedExampleContext: @escaping Quick.SharedExampleContext)
  public static func itBehavesLike<C>(_ behavior: Quick.Behavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)
  public static func pending(_ description: Swift.String, closure: () throws -> Swift.Void)
  public static func xdescribe(_ description: Swift.String, closure: () -> Swift.Void)
  public static func xcontext(_ description: Swift.String, closure: () -> Swift.Void)
  public static func xit(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () throws -> Swift.Void)
  public static func xitBehavesLike<C>(_ behavior: Quick.Behavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)
  public static func fdescribe(_ description: Swift.String, closure: () -> Swift.Void)
  public static func fcontext(_ description: Swift.String, closure: () -> Swift.Void)
  public static func fit(_ description: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, closure: @escaping () throws -> Swift.Void)
  public static func fitBehavesLike(_ name: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line)
  public static func fitBehavesLike(_ name: Swift.String, file: Quick.FileString = #file, line: Swift.UInt = #line, sharedExampleContext: @escaping Quick.SharedExampleContext)
  public static func fitBehavesLike<C>(_ behavior: Quick.Behavior<C>.Type, file: Quick.FileString = #file, line: Swift.UInt = #line, context: @escaping () -> C)
}
public typealias AsyncSpecBase = XCTest.XCTestCase
@objc @_inheritsConvenienceInitializers open class AsyncSpec : Quick.AsyncSpecBase {
  @objc public static var current: Quick.AsyncSpec! {
    get
  }
  @objc open class func spec()
  @objc override dynamic open class var defaultTestSuite: XCTest.XCTestSuite {
    @objc get
  }
  @objc override dynamic open class func instancesRespond(to aSelector: ObjectiveC.Selector!) -> Swift.Bool
  @objc override dynamic public init(invocation: Foundation.NSInvocation?)
  @objc override dynamic public init(selector: ObjectiveC.Selector)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class _ExampleBase : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ExampleBase : Quick._ExampleBase {
  @objc public var isSharedExample: Swift.Bool
  @objc public var callsite: Quick.Callsite
  @objc public var name: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Example : Quick.ExampleBase {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override public var name: Swift.String {
    @objc get
  }
  @objc public func run()
  @objc deinit
}
extension Quick.Example {
  @nonobjc public static func == (lhs: Quick.Example, rhs: Quick.Example) -> Swift.Bool
}
